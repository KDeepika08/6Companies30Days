Problem Statement: 
You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.
Evaluate the expression. Return an integer that represents the value of the expression.

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Solution:
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<long long>st;
        for(int i=0;i<tokens.size();i++){
            if(tokens[i] == "+" || tokens[i] == "-" ||tokens[i] == "*"||tokens[i] == "/"){
                long long op1 = st.top();
                st.pop();
                long long op2 = st.top();
                st.pop();
                if(tokens[i] == "+"){
                    st.push((op1+op2));
                }
                else if(tokens[i] == "-"){
                    st.push((op2-op1));
                }
                else if(tokens[i] == "*"){
                    st.push((op2*op1));
                }
                else{
                    st.push((op2/op1));
                }
            }
            else{
                st.push(stoll(tokens[i]));
            }
        }
        return st.top();
    }
};

REMARKS:
For storing the final sum I created a variable sum and initialized with zero and at every operation i added that result to the sum. --> RUNTIME ERROR
So I used the same stack that would store my sum and at last when i returned the top of stack --> ACCEPTED
